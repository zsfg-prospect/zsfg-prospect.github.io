"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[944],{944:(t,n,a)=>{async function e(t){try{let n=await fetch(t);if(!n.ok)throw Error("Failed to fetch ".concat(t,": ").concat(n.status," ").concat(n.statusText));return n.json()}catch(n){throw console.error("Error fetching data from ".concat(t,":"),n),n}}async function o(t){return await new Promise(t=>setTimeout(t,300)),t}async function i(){return console.log("Fetching patient IDs from JSON file"),o(await e("./data/patient_ids.json"))}async function c(t){return(console.log("Fetching timestamps for patient ".concat(t," from JSON file")),[1,2].includes(t))?o(await e("./data/patient_".concat(t,"_timestamps.json"))):o({timestamps:[]})}async function s(t,n){return(console.log("Fetching notes for patient ".concat(t," from JSON file")),[1,2].includes(t))?o(await e("../../data/patient_".concat(t,"_notes.json"))):o({notes:[]})}async function r(t,n){return(console.log("Fetching summary for patient ".concat(t," from JSON file")),[1,2].includes(t))?o(await e("../../data/patient_".concat(t,"_summary.json"))):o({summary:{identified_needs:[],summary_date:new Date().toISOString(),overall_status:"No data available for this patient in the static demo"}})}async function u(t,n){return(console.log("Fetching summary for patient ".concat(t," from JSON file")),[1,2].includes(t))?o(await e("../../data/patient_".concat(t,"_social_risk.json"))):o({description:"",recommendations:[]})}a.d(n,{getPatientIds:()=>i,getPatientNotes:()=>s,getPatientSocialRisk:()=>u,getPatientSummary:()=>r,getPatientTimestamps:()=>c})}}]);